pipeline {
    agent any
    parameters {
        string(name: 'url', defaultValue: 'https://api.cloudinary.com/v1_1/dh9uchtpo/upload', description: 'cloudinary url')
    }
    environment {
        BUILD_START = "${new Date().getTime()}"
    }
    options {
        // retry(2) // 재시도 횟수
        buildDiscarder(logRotator(numToKeepStr: '100')) // 빌드 로그는 100개까지 유지
    }
    stages {
        stage('run newman') {
            steps {
                script {
                    def nodeInstalled = sh(script: 'node --version', returnStatus: true) == 0
                        // if (!nodeInstalled) {
                        //     // If Node.js is not installed, install it
                        //     sh '''
                        //         curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
                        //         sudo apt-get install -y nodejs
                        //     '''
                        // }
                            // sh '''
                            // . ~/.nvm/nvm.sh
                            // npm install 16
                            // nvm use 16
                            // npm install newman
                            // newman --version
                            // npm install -S newman-reporter-allure
                            // rm -rf allure-results
                            // newman run collection.json \
                            // --insecure -r 'cli,junit,allure,json' \
                            // --reporter-allure-export allure-results
                            // '''

                            // mkdir ~/.npm-global
                            sh '''
                            npm config set prefix '~/.npm-global'
                            echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
                            . ~/.bashrc
                            npm install -g newman
                            npm install -g newman-reporter-allure
                            node --version
                            npm --version
                            newman --version
                            rm -rf allure-results
                            newman run collection.json \
                            --insecure -r 'cli,junit,allure,json' \
                            --reporter-allure-export allure-results
                            '''
            }
                }
            }
        }

    post {
        always {
            publishAllureResults("allure-results")
        }
        success {
            script {
                // 빌드 소요시간 계산
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "성공"
            }
        }
        failure {
            script {
                // 빌드 소요시간 계산
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "실패"
            }
        }
        aborted {
            script {
                // 빌드 소요시간 계산
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "중단"
           }
        }
    }
}


def publishAllureResults() {
    allure includeProperties: false, jdk: '', results: [[path: 'reports/allureReports']]
}

def calculateDuration() {
    def endTime = new Date().getTime()
    def durationMillis = endTime - (env.BUILD_START as Long)
    def durationSeconds = (durationMillis / 1000) as int
    def minutes = (durationSeconds / 60).intValue()
    def seconds = (durationSeconds % 60).intValue()

    String timeMessage = ""
    if (minutes > 0 || seconds > 0) {
        if (minutes > 0) {
            timeMessage += "${minutes}분 "
        }
        if (seconds > 0) {
            timeMessage += "${seconds}초"
        }
    } else {
        timeMessage = "소요 시간 없음"
    }
    return [minutes, seconds, timeMessage]
}