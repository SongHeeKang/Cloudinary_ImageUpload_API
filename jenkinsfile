pipeline {
    agent any
    parameters {
        string(name: 'url', defaultValue: 'https://console.cloudinary.com/', description: 'cloudinary url')
    }
    environment {
        BUILD_START = "${new Date().getTime()}"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '100'))
    }
    stages {
        stage('run newman') {
            steps {
                script {
                    sh '''
                    npm config set prefix '~/.npm-global'
                    echo 'export PATH=~/.npm-global/bin:$PATH' >> ~/.bashrc
                    . ~/.bashrc
                    npm install -g newman
                    npm install -g newman-reporter-allure
                    node --version
                    npm --version
                    newman --version
                    rm -rf allure-results
                    newman run collection.json \
                    --insecure -r 'cli,junit,allure,json' \
                    --reporter-allure-export allure-results
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                publishAllureResults()
            }
        }
        success {
            script {
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "성공: ${timeMessage}"
            }
        }
        failure {
            script {
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "실패: ${timeMessage}"
            }
        }
        aborted {
            script {
                def durationResult = calculateDuration()
                def minutes = durationResult[0]
                def seconds = durationResult[1]
                def timeMessage = durationResult[2]

                echo "중단: ${timeMessage}"
            }
        }
    }
}

def publishAllureResults() {
    allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
}

def calculateDuration() {
    def endTime = new Date().getTime()
    def durationMillis = endTime - (env.BUILD_START as Long)
    def durationSeconds = (durationMillis / 1000) as int
    def minutes = (durationSeconds / 60).intValue()
    def seconds = (durationSeconds % 60).intValue()

    String timeMessage = ""
    if (minutes > 0 || seconds > 0) {
        if (minutes > 0) {
            timeMessage += "${minutes}분 "
        }
        if (seconds > 0) {
            timeMessage += "${seconds}초"
        }
    } else {
        timeMessage = "소요 시간 없음"
    }
    return [minutes, seconds, timeMessage]
}